
; +--- Widget: Powermenu ------------------------------------------------------+
(defwidget powermenu []
           (box :orientation "horizontal"
                :halign "center"
                :class "powermenu-bar-container"
            "powermenu"))

; +--- Widget: Workspaces -----------------------------------------------------+
(deflisten var-workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
; (defvar var-workspace-icons "󰝚") ; Home, Study, Code, Search, Documentation, Servers, Scratch, Communication, Music
(defvar var-workspace-icons "󰚡󱆀󰅴󰦅󰭤󰒍󰻭󰂞󰎈󰂕") ; Home, Study, Code, Search, Documentation, Servers, Scratch, Communication, Music
(defwidget w-workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
         :class "workspaces"
      (label :text "${var-workspaces}${current_workspace}" :visible false)
      (for workspace in var-workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "workspace-current" : ""} ${workspace.windows > 0 ? "workspace-occupied" : "workspace-empty"}"
            (label :text "${substring(var-workspace-icons, workspace.id - 1, 1)}")))))))

; +--- Widget: Battery --------------------------------------------------------+
(defpoll var-battery :interval "1m" "scripts/battery")
(defwidget w-battery []
  (box :class "battery"
       :visible {var-battery.present == "1"}
       (overlay
        (circular-progress :value {var-battery.percent - (var-battery.percent % 5)}
                           :thickness 2
                           :start-at 25
                           :width 28
                           :class "battery-progress")
        (label :text "${var-battery.icon}"
               :valign "center"
               :halign "center"
               :style {var-battery.charging == "1" ? "margin-left: 3px" : ""} ; center charging icon
               :class "battery-icon"))))

; +--- Widget: Brightness------------------------------------------------------+
(defpoll var-brightness-lin :interval "1s" "scripts/brightness")
; (defvar brightness-icons ".");
(defvar brightness-icons "󱩎󱩏󱩐󱩑󱩒󱩓󱩔󱩕󱩖󰛨");

(defwidget w-brightness []
  (box :class "brightness"
       :visible {var-battery.present == "1"}
       (overlay
        (circular-progress :value var-brightness-lin
                           :thickness 2
                           :start-at 25
                           :width 28
                           :class "brightness-progress")
        ; "test"
        (label :text "${substring(brightness-icons, round(var-brightness-lin / 10, 0), 1)}"
               :valign "center"
               :halign "center"
               :class "brightness-icon"))))

; +--- Widget: Date and Time --------------------------------------------------+
(defpoll var-datetime :interval "1s" "date '+ %a, %b %d, %H:%M'")
(defwidget w-datetime []
    (box :orientation "horizontal"
         :class "datetime-container"
     (box :class "time" var-datetime)))

; +--- Widget: Notifications Button -------------------------------------------+
(defwidget notifications-button []
    (button :label "Notification"
            :class "notifications-button"
            ""))

; +--- Sections ---------------------------------------------------------------+
(defwidget section-start []
  (box :orientation "h"
       :class "section-start-container"
       :halign "start"
     (w-workspaces)))


(defwidget section-middle []
  (box :orientation "h"
       :class "section-middle-container"
       :halign "center"
       "middle"))

(defwidget section-end []
  (box :orientation "h"
       :class "section-end-container"
       :halign "end"
       :space-evenly false
       (w-brightness)
       (w-battery)
       (w-datetime)
       (notifications-button)))

(defwidget bar-container []
           (box :orientation "h"
                :vexpand true
                :hexpand false
                :class "bar-container"
            (section-start)
            (section-middle)
            (section-end)))

; +--- Window -----------------------------------------------------------------+
(defwindow bar0
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "100%"
                               :height "48"
                               :anchor "bottom left")
           :stacking "fg"
           :exclusive true
           :focusable false
           :namespace "quitlox-bar"
 (bar-container))

(defwindow bar1
           :monitor 1
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "100%"
                               :height "48"
                               :anchor "bottom left")
           :stacking "fg"
           :exclusive true
           :focusable false
           :namespace "quitlox-bar"
 (bar-container))
