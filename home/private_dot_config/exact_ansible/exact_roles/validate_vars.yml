---
- name: Gather and validate playbook variables
  block: 
  - name: Check 'system.hostname' fact
    block:
    - name: Prompt for "system.hostname" variable
      pause:
        prompt: "Enter hostname"
      when: system.hostname is not defined or system.hostname == none or system.hostname == ""
      register: system_hostname_input
    
    - name: Set "system.hostname" variable
      set_fact:
        system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
      vars:
        system_set:
          hostname: "{{ system_hostname_input.user_input }}"
      when: system_hostname_input is defined and system_hostname_input.user_input is defined
    when: system.hostname is not defined or system.hostname == none or system.hostname == ""

  - name: Validate 'system.hostname' fact
    fail:
      msg: "Hostname must be at least 3 characters long"
    when: system.hostname | length < 3

  - name: Check 'system.is_headless' fact
    block:
    - name: Prompt for "system.is_headless" variable
      pause:
        prompt: "Is the system headless?"
      register: system_is_headless_input
    
    - name: Set "system.is_headless" variable
      set_fact:
        system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
      vars:
        system_set:
          is_headless: "{{ system_is_headless_input.user_input | bool }}"
      when: system_is_headless_input is defined and system_is_headless_input.user_input is defined
    when: system.is_headless is not defined or system.is_headless == none
    
  - name: Validate 'system.is_headless' input
    fail:
      msg: "Input for 'headless' must be a valid boolean value (yes, no, true, false, y, n)"
    when: >
      system_is_headless_input is defined and 
      system_is_headless_input.user_input is defined and
      system_is_headless_input.user_input | lower not in ['yes', 'no', 'true', 'false', 'y', 'n', '0', '1']

  - name: Check 'system.features.wifi' fact
    block:
    - name: Prompt for "system.features.wifi" variable
      pause:
        prompt: "Does the system have wifi?"
      register: system_features_wifi_input
    
    - name: Set "system.features.wifi" variable
      set_fact:
        system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
      vars:
        system_set:
          features:
            wifi: "{{ system_features_wifi_input.user_input | bool }}"
      when: system_features_wifi_input is defined and system_features_wifi_input.user_input is defined
    when: system.features.wifi is not defined or system.features.wifi == none
    
  - name: Validate 'system.features.wifi' input
    fail:
      msg: "Input for 'wifi' must be a valid boolean value (yes, no, true, false, y, n)"
    when: >
      system_features_wifi_input is defined and 
      system_features_wifi_input.user_input is defined and
      system_features_wifi_input.user_input | lower not in ['yes', 'no', 'true', 'false', 'y', 'n', '0', '1']

  - name: Check 'system.features.bluetooth' fact
    block:
    - name: Prompt for "system.features.bluetooth" variable
      pause:
        prompt: "Does the system have bluetooth?"
      register: system_features_bluetooth_input
    
    - name: Set "system.features.bluetooth" variable
      set_fact:
        system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
      vars:
        system_set:
          features:
            bluetooth: "{{ system_features_bluetooth_input.user_input | bool }}"
      when: system_features_bluetooth_input is defined and system_features_bluetooth_input.user_input is defined
    when: system.features.bluetooth is not defined or system.features.bluetooth == none
    
  - name: Validate 'system.features.bluetooth' input
    fail:
      msg: "Input for 'bluetooth' must be a valid boolean value (yes, no, true, false, y, n)"
    when: >
      system_features_bluetooth_input is defined and 
      system_features_bluetooth_input.user_input is defined and
      system_features_bluetooth_input.user_input | lower not in ['yes', 'no', 'true', 'false', 'y', 'n', '0', '1']

  - name: Check 'system.features.gpu' fact
    block:
    - name: Prompt for "system.features.gpu" variable
      pause:
        prompt: "What GPU does the system have? (none, nvidia, intel, amd)"
      register: system_features_gpu_input
    
    - name: Set "system.features.gpu" variable
      set_fact:
        system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
      vars:
        system_set:
          features:
            gpu: "{{ system_features_gpu_input.user_input }}"
      when: system_features_gpu_input is defined and system_features_gpu_input.user_input is defined
    when: system.features.gpu is not defined or system.features.gpu == none
    
  - name: Validate 'system.features.gpu' fact
    fail:
      msg: "GPU must be one of: none, nvidia, intel, amd"
    when: system.features.gpu not in ['none', 'nvidia', 'intel', 'amd']

- name: Display playbook variables
  ansible.builtin.debug:
    msg:
      - "system:"
      - "  hostname: {{ system.hostname }}"
      - "  is_headless: {{ system.is_headless }}"
      - "  is_vm_guest: {{ system.is_vm_guest }}"
      - "  features:"
      - "    wifi: {{ system.features.wifi }}"
      - "    bluetooth: {{ system.features.bluetooth }}"
      - "    gpu: {{ system.features.gpu }}"

- name: Detect whether system is a VM Guest
  ansible.builtin.set_fact:
    system: "{{ system | default({}) | combine(system_set, recursive=True) }}"
  vars:
    system_set:
      is_vm_guest: "{{ ansible_virtualization_role == 'guest' }}"
