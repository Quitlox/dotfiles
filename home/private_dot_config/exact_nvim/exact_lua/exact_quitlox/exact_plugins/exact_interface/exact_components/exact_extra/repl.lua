-- Example for configuring Neovim to load user-installed installed Lua rocks:
package.path = package.path .. ";" .. vim.fn.expand("$HOME") .. "/.luarocks/share/lua/5.1/?/init.lua;"
package.path = package.path .. ";" .. vim.fn.expand("$HOME") .. "/.luarocks/share/lua/5.1/?.lua;"

local molten_commands = {
    { ":MoltenInfo", "Show information about the state of the plugin, initialization status, available kernels, and running kernels" },
    {
        ":MoltenInit",
        "Initialize a kernel for the current buffer. If shared is passed as the first value, this buffer will use an already running kernel. If no kernel is given, prompts the user.",
    },
    { ":MoltenDeinit", "De-initialize the current buffer's runtime and molten instance. (called automatically on vim close/buffer unload)" },
    { ":MoltenGoto", "Go to the nth code cell n defaults to 1 (1 indexed)" },
    { ":MoltenNext", "Go to the next code cell, or jump n code cells n defaults to 1. Values wrap. Negative values move backwards" },
    { ":MoltenPrev", "like Next but backwards" },
    { ":MoltenEvaluateLine", "Evaluate the current line" },
    { ":MoltenEvaluateVisual", "Evaluate the visual selection (cannot be called with a range!)" },
    { ":MoltenEvaluateOperator", "Evaluate text selected by the following operator. see Keybindings for useage" },
    { ":MoltenEvaluateArgument", "Evaluate given code in the given kernel" },
    { ":MoltenReevaluateCell", "Re-evaluate the active cell (including new code) with the same kernel that it was originally evaluated with" },
    { ":MoltenDelete", "Delete the active cell (does nothing if there is no active cell)" },
    { ":MoltenShowOutput", "Shows the output window for the active cell" },
    { ":MoltenHideOutput", "Hide currently open output window" },
    {
        ":MoltenEnterOutput",
        "Move into the active cell's output window. Opens but does not enter the output if it's not open. must be called with noautocmd (see Keybindings for example)",
    },
    { ":MoltenInterrupt", "Sends a keyboard interrupt to the kernel which stops any currently running code. (does nothing if there's no current output)" },
    {
        ":MoltenOpenInBrowser",
        "Open the current output in the browser. Currently this only supports cells with 'text/html' outputs, configured with molten_auto_open_html_in_browser and molten_open_cmd",
    },
    { ":MoltenRestart", "Shuts down a restarts the kernel. Deletes all outputs if used with a bang" },
    {
        ":MoltenSave",
        "Save the current cells and evaluated outputs into a JSON file. When path is specified, save the file to path, otherwise save to g:molten_save_path. currently only saves one kernel per file",
    },
    {
        ":MoltenLoad",
        "Loads cell locations and output from a JSON file generated by MoltenSave. path functions the same as MoltenSave. If shared is specified, the buffer shares an already running kernel.",
    },
    { ":MoltenExportOutput", "Export outputs from the current buffer and kernel to a jupyter notebook (.ipynb) at the given path. read more" },
    { ":MoltenImportOutput", "Import outputs from a jupyter notebook (.ipynb). read more" },
}

return {

    -- +---------------------------------------------------------+
    -- | Jupyter Notebook: molten.nvim                           |
    -- +---------------------------------------------------------+
    require("quitlox.util").legendary(molten_commands),
    {
        "benlubas/molten-nvim",
        -- enabled = function() return vim.fn.has("win64") == 0 and vim.g.neovide == nil end,
        enabled = true,
        version = "*",
        lazy = false,
        -- Required python packages: pynvim jupyter_client
        -- Optional python packages: cairosvg, pnglatex, plotly, pyperclip, nbformat
        dependencies = { "3rd/image.nvim" },
        build = ":UpdateRemotePlugins",
        init = function()
            -- these are examples, not defaults. Please see the readme
            vim.g.molten_image_provider = "image.nvim"
            vim.g.molten_output_win_max_height = 20
        end,
        config = false,
        keys = {
            { "<leader>ji", "<cmd>MoltenInit<cr>", desc = "Initialize Jupyter" },
            { "<leader>je", "<cmd>MoltenEvaluateOperator<cr>", desc = "Evaluate operator" },
            { "<leader>jrl", "<cmd>MoltenEvaluateLine<cr>", desc = "Evaluate line" },
            { "<leader>jrr", "<cmd>MoltenReevaluateCell<cr>", desc = "Re-evaluate cell" },
            { "<leader>jr", ":<C-u>MoltenEvaluateVisual<cr>", desc = "Evaluate visual selection", mode = "v" },
            { "<leader>jd", "<cmd>MoltenDelete<cr>", desc = "Delete cell" },
            { "<leader>jh", "<cmd>MoltenHideOutput<cr>", desc = "Hide output" },
            { "<leader>js", "<cmd>noautocmd MoltenEnterOutput<cr>", desc = "Show/enter output" },
        },
    },
    require("quitlox.util").whichkey({
        ["<leader><leader>j"] = { name = "Jupyter" },
        ["<leader><leader>jr"] = { name = "Jupyter Evaluate" },
    }),
    {
        "3rd/image.nvim",
        -- enabled = function() return vim.fn.has("win64") == 0 end,
        enabled = true,
        version = "",
        lazy = true,
        -- Depends on luarock "magick"
        -- luarocks --local --lua-version 5.1 install magick
        opts = {
            backend = "kitty",
            integrations = {},
            max_width = 100,
            max_height = 12,
            max_height_window_percentage = math.huge,
            max_width_window_percentage = math.huge,
            window_overlap_clear_enabled = true,
            window_overlap_clear_ft_ignore = { "cmp_menu", "cmp_docs", "" },
        },
    },
}
