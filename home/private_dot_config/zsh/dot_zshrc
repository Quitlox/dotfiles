
# Source Base16 Theme
[ -f "$HOME/.config/zsh/theme.sh" ] && . ~/.config/zsh/theme.sh
# Colors
autoload colors && colors

############################################################
### Zsh Settings                                         ###
############################################################

setopt rmstarsilent             # Don't prompt on rm * (already aliased rm, see ./aliases.zsh)
setopt extendedglob             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob               # Case insensitive globbing
setopt numericglobsort          # Sort filenames numerically when it makes sense
setopt globdots                 # files beginning with . matched without explicit .

setopt rcexpandparam            # Array expension with parameters
setopt nocheckjobs              # Don't warn about running processes when exiting
setopt nobeep                   # No beep
setopt autocd                   # if only directory path is entered, cd there.
setopt ignoreeof                # Do not EOF on Ctrl+D

# History Settings
setopt extended_history         # Record timestamp of command in HISTFILE
setopt appendhistory            # Immediately append history instead of overwriting
setopt histignorealldups        # If a new command is a duplicate, remove the older one
setopt share_history            # Share command history data
setopt inc_append_history       # save commands are added to the history immediately,
                                # otherwise only when shell exits.

# Bash style Ctrl+Backspace (till first slash)
autoload -Uz select-word-style
select-word-style bash

############################################################
### Zsh Completion Settings                              ###
############################################################

# Completion rleated settings
setopt always_to_end 		# Cursor moved to the end in full copmletion
setopt hash_list_all 		# Hash everything before completion
unsetopt menu_complete 		# Do not autoselect the first completion entry
setopt auto_menu 		# Show completion menu on successive tab presses

# Performance
#zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh
# Case insensitive tab completion
#zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
# [alt] first case insensitive, then complete partial words
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# Automatically find new executables in path
zstyle ':completion:*' rehash true
# Set order of different completion types
zstyle ':completion:*' completer _expand _complete _ignored _approximate
# Show file details on file completion
#zstyle ':completion:*' file-list all

############################################################
### Zinit: Init & Settings                               ###
############################################################

HISTSIZE=999999999
export HISTFILE="$HOME/.cache/zsh/zhistory"
SAVEHIST=$HISTSIZE

# Zinit Paths
typeset -A ZINIT  # initial Zinit's hash definition
ZINIT[BIN_DIR]=$HOME/.local/src/zinit
ZINIT[HOME_DIR]=$HOME/.local/share/zinit
ZINIT[PLUGINS_DIR]=$HOME/.local/share/zinit/plugins
ZINIT[COMPLETIONS_DIR]=$HOME/.local/share/zinit/completions
ZINIT[SNIPPETS_DIR]=$HOME/.local/share/zinit/snippets
ZINIT[ZCOMPDUMP_PATH]=$HOME/.cache/zsh/zcompdump
ZPFX=~/.local/share/zinit/polaris

### Added by Zinit's installer
if [[ ! -f "$HOME/.local/src/zinit/zinit.zsh" ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/src/zinit" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

### End of Zinit's installer chunk

source ~/.local/src/zinit/zinit.zsh

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

############################################################
### Zinit: Annexes                                       ###
############################################################

# Turbo Mode:
# Wait 0 - Instantly needed for properly navigating the shell
# Wait 1 - Often used commands, programs and extra features
# Wait 2 - Non-urgent stuff

# z-a-bin-gem-node: Provides a RVM-like solution for Ruby
# Gems, Node modules and regular binaries.
zinit load zdharma-continuum/z-a-bin-gem-node

# z-a-man: Automatically generates man pages out of plugin
# README.md files.
zinit ice has"tree"
zinit load zdharma-continuum/z-a-man


############################################################
### Zinit: Programs                                      ###
############################################################

### exa
# A modern replacement for 'ls'.
# FIXME: Replace with eza
zinit ice wait"0a" \
  if'[[ -z "$commands[exa]" ]]' \
  from"gh-r" as"command" \
  extract mv"bin/exa* -> exa" pick"exa"
zinit load ogham/exa

### bat
# A cat clone with wings.
zinit ice wait"3" as"command" from"gh-r" \
  if'[[ -z "$commands[bat]" ]]' \
  mv"bat* -> bat" pick"bat/bat"
zinit load sharkdp/bat

### fzf
# A command-line fuzzy finder.

# Array of directories to exclude
exclude_dirs=(.git .svn .hg .venv env venv node_modules .cache .DS_Store .idea .vscode __pycache__ .pytest_cache .mypy_cache .pytest_cache dist build .sass-cache .npm .next .nuxt .yarn-cache .yarn .bundle vendor .serverless .netlify .vercel .firebase .cypress .storybook .parcel-cache .gradle .m2 .rvm .rbenv .jekyll-cache .tox .docker)
# Function to select and open a directory
function open_dir_command() {
    local find_cmd="find $1 -type d"
    # Exclude the blacklist directories
    for dir in "${exclude_dirs[@]}"; do
        find_cmd+=" \( -name $dir -prune \) -o"
    done
    # Add wildcard patterns to the find command
    find_cmd+=" \( -path \*.egg-info -prune \) -o"
    find_cmd+=" \( -path .venv\* -prune \) -o"
    # Add -type d -print to the end of the command
    find_cmd+=" -type d -print 2> /dev/null | fzf"
    echo $find_cmd
}
# Function to find a file from the current directory
function find_file_command() {
    local find_cmd="find . -type f"
    # Exclude the blacklist directories
    for dir in "${exclude_dirs[@]}"; do
        find_cmd+=" \( -name $dir -prune \) -o"
    done
    # Add wildcard patterns to the find command
    find_cmd+=" \( -path \*.egg-info -prune \) -o"
    find_cmd+=" \( -path .venv\* -prune \) -o"
    # Add -type d -print to the end of the command
    find_cmd+=" -type f -print 2> /dev/null | fzf"
    echo $find_cmd
}
# export FZF_COMPLETION_TRIGGER=''
function __bind_fzf_keys() {
  function fzf_select_directory_home() {
    local find_cmd=$(open_dir_command ~)
    local dir=$(eval "$find_cmd")
    if [ -n "$dir" ]; then
        cd "$dir"
        zle reset-prompt
    fi
  }
  function fzf_find_file_current() {
    local find_cmd=$(find_file_command)
    local dir=$(eval "$find_cmd")
    if [ -n "$dir" ]; then
        LBUFFER="$LBUFFER$dir"
        zle reset-prompt
        zle beginning-of-line
        zle -I  # Enter insert mode
    fi
  }
  function fzf_find_directory_current() {
    local find_cmd=$(open_dir_command .)
    local dir=$(eval "$find_cmd")
    if [ -n "$dir" ]; then
        LBUFFER="$LBUFFER$dir"
        zle reset-prompt
        zle beginning-of-line
        zle -I  # Enter insert mode
    fi
  }
  zle -N fzf_select_directory_home
  zle -N fzf_select_directory_cwd
  zle -N fzf_find_file_current
  zle -N fzf_find_directory_current
  bindkey '^o' fzf_select_directory_home
  bindkey '^f' fzf_find_file_current
  bindkey '^d' fzf_find_directory_current

  source <(fzf --zsh)
}
if [[ -n "$commands[fzf]" ]]; then
  __bind_fzf_keys
fi
zinit ice wait"0b" atload'__bind_fzf_keys' \
  if'[[ -z "$commands[fzf]" ]]' \
  as"command" from"gh-r" pick"fzf"
zinit load junegunn/fzf

### Git Fuzzy
zinit ice as"program" pick"bin/git-fuzzy"
zinit light bigH/git-fuzzy

### fd
zinit ice \
  wait"3" if'[[ -z "$commands[fd]" ]]' \
  as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"
zinit load sharkdp/fd

### zoxide
zinit ice wait"0" lucid \
  as"command" from"gh-r" \
  mv"zoxide*/zoxide -> zoxide" \
  atclone"./zoxide init zsh > init.zsh" \
  atpull"%atclone" src"init.zsh" nocompile'!'
zinit load ajeetdsouza/zoxide

############################################################
### Zinit: Completions                                   ###
############################################################

### Docker
# Add Support for stacking flags (e.g. docker run -it)
# By default, zsh does not parse these
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes
zinit ice as"completion" blockf
zinit snippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker
# docker compose
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes
zinit ice as"completion" blockf
zinit snippet OMZP::docker-compose/_docker-compose

### Pylint
zinit ice as"completion" blockf
zinit snippet OMZP::pylint/_pylint

### Cargo
zinit ice lucid nocompile
zinit load MenkeTechnologies/zsh-cargo-completion

### GIT
zinit load davidde/git
alias grc='git rebase --continue'
alias gca='git commit --amend'
alias gcan='git commit --amend --no-edit'
alias gpfl='git push --force-with-lease'

############################################################
### Zinit: Scripts                                       ###
############################################################

### SSH-Agent ###
zinit ice wait"1" silent
zinit load bobsoppe/zsh-ssh-agent

### Node Version Manager (NVM)
export LESSCHARSET=utf-8
export NVM_LAZY_LOAD=true
export NVM_LAZY_LOAD_EXTRA_COMMANDS=("vim" "chezmoi")
export NVM_SYMLINK_CURRENT=true
export NVM_COMPLETION=false
export NVM_DIR="$HOME/.local/share/nvm"
zinit ice blockf wait"1"
zinit load lukechilds/zsh-nvm

### Gitignore plugin â€“ commands gi and gii
zinit ice wait"2" \
  trigger-load'!gi;!gii'
zinit load voronkovich/gitignore.plugin.zsh

### zhooks
zinit ice wait"2" \
  trigger-load'!zhooks'
zinit load agkozak/zhooks

############################################################
### Zinit: Plugins Extra                                 ###
############################################################

# Python: Poetry
zinit ice wait"3" as"completion" blockf
zinit snippet OMZP::poetry/poetry.plugin.zsh

# Rust
zinit ice wait"3" as"completion" blockf
zinit snippet OMZP::rust/rust.plugin.zsh

############################################################
### Zinit: Plugins                                       ###
############################################################

# tmux
ZSH_TMUX_CONFIG="$HOME/.config/tmux/tmux.conf"
zinit ice wait"1" if'[[ -n "$commands[tmux]" ]]'
zinit snippet OMZP::tmux/tmux.plugin.zsh

### History Substring Searching
HISTORY_SUBSTRING_SEARCH_PREFIXED=true # Match with autosuggestions
function __bind_history_keys() {
  bindkey "^P" history-substring-search-up
  bindkey "^N" history-substring-search-down
  bindkey -M vicmd "k" history-substring-search-up
  bindkey -M vicmd "j" history-substring-search-down
}
zinit ice wait atload'__bind_history_keys'
zinit load zsh-users/zsh-history-substring-search

### zconvey
# Send notifications and commands to all or selected
# Zshell instances.
zinit ice wait for \
  zdharma-continuum/zconvey \
  as"command" pick"cmds/zc-bg-notify" silent \
    zdharma-continuum/zconvey

# Custom Plugins & Completions
zinit wait as"none" \
  id-as"local-plugins" nocompile \
  multisrc"${ZDOTDIR}/*.zsh" \
  atpull"zinit creinstall -q ${ZDOTDIR}/completions" \
  run-atpull \
for zdharma-continuum/null

# Use Atuin or FZF for history searching
# zsh-fzf-history-search
zinit ice lucid wait'0c' if'[[ -z "$commands[atuin]" ]]'
zinit light joshskidmore/zsh-fzf-history-search
# Atuin
export ATUIN_NOBIND="true"
function __bind_atuin_keys() {
  bindkey '^r' _atuin_search_widget
}
zinit ice wait'0c' if'[[ -n "$commands[atuin]" ]]' atload'__bind_atuin_keys'
zinit load ellie/atuin

# Zsh Autosuggestions
ZSH_AUTOSUGGEST_STRATEGY=(history) # Match suggestions with history-substring
zinit ice wait atload'_zsh_autosuggest_start'
zinit load zsh-users/zsh-autosuggestions

# Zsh Completions
zinit ice wait blockf atpull'zinit creinstall -q .'
zinit load zsh-users/zsh-completions

# Fast Syntax Highlighting
zinit ice wait atinit'zpcompinit; zpcdreplay'
zinit load zdharma-continuum/fast-syntax-highlighting

# Zsh Window Title
zinit light olets/zsh-window-title

############################################################
### Starship Prompt                                      ###
############################################################

eval "$(starship init zsh)"

