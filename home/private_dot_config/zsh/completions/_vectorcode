#compdef vectorcode

# AUTOMATICALLY GENERATED by `shtab`


_shtab_vectorcode_commands() {
  local _commands=(
    "check:"
    "chunks:"
    "clean:"
    "drop:"
    "init:"
    "ls:"
    "prompts:"
    "query:"
    "update:"
    "vectorise:"
    "version:"
  )
  _describe 'vectorcode commands' _commands
}

_shtab_vectorcode_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  "(- : *)"{-s,--print-completion}"[Print completion script.]:print_completion:(bash zsh tcsh)"
)

_shtab_vectorcode_check_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  ":Item to be checked. Possible options\: \[config\]:(config)"
  ":Item to be checked. Possible options\: \[config\]:(config)"
)

_shtab_vectorcode_chunks_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  {--overlap,-o}"[Ratio of overlaps between chunks.]:overlap:"
  {-c,--chunk_size}"[Size of chunks (-1 for no chunking).]:chunk_size:"
  "(*)::Paths to files to be chunked.:_files"
)

_shtab_vectorcode_clean_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)

_shtab_vectorcode_drop_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)

_shtab_vectorcode_init_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  {--force,-f}"[Wipe current project config and overwrite with global config (if it exists).]"
)

_shtab_vectorcode_ls_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)

_shtab_vectorcode_prompts_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)

_shtab_vectorcode_query_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  {--overlap,-o}"[Ratio of overlaps between chunks.]:overlap:"
  {-c,--chunk_size}"[Size of chunks (-1 for no chunking).]:chunk_size:"
  {--multiplier,-m}"[Query multiplier.]:multiplier:"
  {-n,--number}"[Number of results to retrieve.]:number:"
  "--exclude[Files to exclude from query results.]:exclude:_files"
  "--absolute[Use absolute path when returning the retrieval results.]"
  "--include[What to include in the final output.]:include:(path document)"
  "(*):Query keywords.:"
)

_shtab_vectorcode_update_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)

_shtab_vectorcode_vectorise_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
  {--overlap,-o}"[Ratio of overlaps between chunks.]:overlap:"
  {-c,--chunk_size}"[Size of chunks (-1 for no chunking).]:chunk_size:"
  {--recursive,-r}"[Recursive indexing for directories.]"
  {--force,-f}"[Force to vectorise the file(s) against the gitignore.]"
  "(*)::Paths to files to be vectorised.:_files"
)

_shtab_vectorcode_version_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--project_root[Project root to be used as an identifier of the project.]:project_root:_files -/"
  {--pipe,-p}"[Print structured output for other programs to process.]"
  "--no_stderr[Supress all STDERR messages.]"
)


_shtab_vectorcode() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_vectorcode_options[(I)${(q)one_or_more}*]} + ${_shtab_vectorcode_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_vectorcode_options+=(': :_shtab_vectorcode_commands' '*::: :->vectorcode')
  fi
  _arguments -C -s $_shtab_vectorcode_options

  case $state in
    vectorcode)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_vectorcode-$line[1]:"
      case $line[1] in
        check) _arguments -C -s $_shtab_vectorcode_check_options ;;
        chunks) _arguments -C -s $_shtab_vectorcode_chunks_options ;;
        clean) _arguments -C -s $_shtab_vectorcode_clean_options ;;
        drop) _arguments -C -s $_shtab_vectorcode_drop_options ;;
        init) _arguments -C -s $_shtab_vectorcode_init_options ;;
        ls) _arguments -C -s $_shtab_vectorcode_ls_options ;;
        prompts) _arguments -C -s $_shtab_vectorcode_prompts_options ;;
        query) _arguments -C -s $_shtab_vectorcode_query_options ;;
        update) _arguments -C -s $_shtab_vectorcode_update_options ;;
        vectorise) _arguments -C -s $_shtab_vectorcode_vectorise_options ;;
        version) _arguments -C -s $_shtab_vectorcode_version_options ;;
      esac
  esac
}



typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_vectorcode -N vectorcode
else
  # autoload from fpath, call function directly
  _shtab_vectorcode "$@"
fi

